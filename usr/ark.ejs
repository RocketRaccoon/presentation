<div class="slides">
    <section class="stack">
        <section  class="croissant"
                  data-transition="slide-in fade-out"
                  data-background-image="img/ball.gif"
                  data-background-size="53%"
                  data-transition="slide-in fade-out"></section>
    </section>

    <!-- Cover page -->
    <section class="stack">
        <section>
            <h1>Something New</h1>
            <h3 class="fragment" >for your testing</h3>
        </section>
    </section>

    <section class="stack">
        <section data-transition="slide-in fade-out">
            <h2>Component Testing</h2>
            <ol style="text-align: left;">
                <li class="fragment" data-fragment-index="1">Check service in isolated infrastructure</li>
                <li class="fragment" data-fragment-index="2">Check service contracts</li>
                <ul>
                    <li class="fragment" data-fragment-index="3">Validate response with JSON schema</li>
                    <li class="fragment" data-fragment-index="4">Validate interaction with other services</li>
                </ul>
                <li class="fragment" data-fragment-index="5">Check service with any configuration</li>
            </ol>
        </section>

        <section data-transition="slide-in fade-out">
            <img data-fragment-index="1" data-src="img/flow_test.png" style="width: 720px; height: 500px;">
        </section>

        <section data-transition="slide-in fade-out">
            <h2>Mock external services with Wiremock</h2>
            <ul>
                <li class="fragment" data-fragment-index="1">Wiremock in docker container</li>
                <li class="fragment" data-fragment-index="2">Control mock via remote api</li>
            </ul>
        </section>

        <section data-transition="slide-in fade-out">
            <h2>Wiremock in docker container</h2>
            <pre class="fragment" data-fragment-index="1">Dockerfile<code data-trim data-noescape>
FROM platform/xas-base:0.4.4

ARG WM_PACKAGE=wiremock
ARG WM_VERSION=1.58

ENV APP_NAME $WM_PACKAGE
# install and run wiremock
RUN curl -sSL -o $WM_PACKAGE.jar repo_url
            </code></pre>
        </section>

        <section data-transition="slide-in fade-out">
            <h2>Test Execution Workflow</h2>
            <ol style="text-align: left;">
                <li class="fragment" data-fragment-index="1">Pull docker images</li>
                <li class="fragment" data-fragment-index="2">Start Mock for MDS</li>
                <li class="fragment" data-fragment-index="3">Start Mock for Task Processor</li>
                <li class="fragment" data-fragment-index="4">Configure ARK</li>
                <li class="fragment" data-fragment-index="5">Start ARK</li>
                <li class="fragment" data-fragment-index="6">Execute tests</li>
                <li class="fragment" data-fragment-index="7">Collect ARK logs</li>
                <li class="fragment" data-fragment-index="8">Stop containers</li>
            </ol>
        </section>

        <section data-transition="slide-in fade-out">
            <h2>Docker workflow</h2>
            <pre><code data-trim data-noescape>
docker pull  ...
docker pull  ...
docker build ...
docker build ...
...
...
docker run   ...
docker run   ...
docker run   ...
docker run   ...
            </code></pre>
        </section>

        <section data-transition="slide-in fade-out">
            <h2>Docker Compose</h2>
            <p>Compose is a tool for defining and running multi-container Docker applications</p>
            <ol style="text-align: left;">
                <li class="fragment" data-fragment-index="1">Build images from Dockerfiles</li>
                <li class="fragment" data-fragment-index="2">Pull images from registry</li>
                <li class="fragment" data-fragment-index="3">Configure and create containers</li>
                <li class="fragment" data-fragment-index="4">Start and stop containers</li>
            </ol>
        </section>

        <section data-transition="slide-in fade-out">
            <h2>Docker Compose</h2>
            <pre>docker-compose.yml<code data-trim data-noescape>
version: '2'
services:
  ark:
    build: ark-server
  mds:
    build: emulator
  processor:
    build: emulator
            </code></pre>
        </section>

        <section data-transition="slide-in fade-out">
            <h2>Docker Compose</h2>
            <pre>docker-compose.yml<code data-trim data-noescape>
version: '2'
services:
  ark:
    build: ark-server
    ports:
      - "18080:8080"
    volumes:
     - ./containers/ark/configs:/etc/ringcentral/ark:ro
    environment:
      - ark.pwr.url=http://processor:8080
    depends_on:
      - processor
    links:
      - processor
                </code></pre>
        </section>

        <section data-transition="slide-in fade-out">
            <h2>One command!</h2>
            <pre>shell<code data-trim data-noescape>
docker-compose up --build
                </code></pre>
        </section>

        <section data-transition="slide-in fade-out">
            <h2>Integrate Docker Compose With Tests</h2>
            <ol style="text-align: left;">
                <li class="fragment" data-fragment-index="1">Start containers before tests</li>
                <li class="fragment" data-fragment-index="2">Share containers environment variables with tests</li>
                <li class="fragment" data-fragment-index="3">Stop containers after tests</li>
                <li class="fragment" data-fragment-index="4">Cleanup</li>
            </ol>
        </section>

        <section data-transition="slide-in fade-out">
            <h2>Gradle task</h2>
            <p style="text-align: left;">
                Custom gradle plugin
            <pre>build.gradle<code data-trim data-noescape>
apply plugin: 'docker-compose'

dockerCompose {
    composeFile = 'docker-compose.yml'
    stopContainers = true
    removeContainers = true
    removeVolumes = true
    waitForHealthyStateTimeout = Duration.ofMinutes(1)
    waitForTcpPortsTimeout = Duration.ofMinutes(3)
}

dockerCompose.isRequiredBy(tests)
                </code></pre>
            </p>
        </section>

        <section data-transition="slide-in fade-out">
            <h2>Gradle task</h2>
            <p style="text-align: left;">
                Share docker variables with tests
            <pre>build.gradle<code data-trim data-noescape>
task tests(type: Test) {
}

tests.doFirst {
    useTestNG()

    dockerCompose.exposeAsSystemProperties(tests)

    def serviceInfo = dockerCompose.servicesInfos.service
    systemProperty 'someServiceHost', serviceInfo.host
}
                </code></pre>
            </p>
        </section>

        <!--<section data-transition="slide-in fade-out">-->
            <!--<h2>Demonstration Docker Compose With Gradle</h2>-->
            <!--<video controls>-->
                <!--<source src="video/gradle-docker-compose.mp4" type="video/mp4" />-->
            <!--</video>-->
        <!--</section>-->
    </section>

    <section class="stack">
        <section class="croissant"
                 data-transition="slide-in fade-out"
                 data-background-image="img/croissant.png"
                 data-background-position="80% 70%"
                 data-background-size="150px">
            <h2>Integration Testing</h2>
            <ul style="text-align: left;">
                <li class="fragment" data-fragment-index="1">Prefer Component Tests over Integration Tests</li>
                <li class="fragment" data-fragment-index="2">Using RC common libraries</li>
                <li class="fragment" data-fragment-index="4">Part of deployment pipeline</li>
            </ul>
        </section>
        <section data-transition="slide-in fade-out">
            <h3>RC common libraries</h3>
            <p class="fragment" data-fragment-index="1">REST Assured</p>
            <ul style="text-align: left;">
                <li data-fragment-index="2" class="fragment">RcRestAssured should receive environment configuration for each test method to use "ToPwrFilter"</li>
                <li data-fragment-index="3" class="fragment">No configuration â‡¨ no filter</li>
                <li data-fragment-index="4" class="fragment">Use to override: <code data-trim>RedirectFilter()</code> and <code data-trim>given(PwrFilter.DISABLED)</code></li>
            </ul>
        </section>
        <section data-transition="slide-in fade-out">
            <h3>RC common libraries</h3>
            <p class="fragment" data-fragment-index="1">Allure Report</p>
            <ul style="text-align: left;">
                <li data-fragment-index="2" class="fragment">Replace ReportNG with Allure Report</li>
                <li data-fragment-index="3" class="fragment">rc-restassured is integrated with rc-allure to provide clear output</li>
                <li data-fragment-index="4" class="fragment">Specify <code>aspectjweaver</code> in run configuration</li>
                <li data-fragment-index="5" class="fragment">Use Allure CLI to generate and run report</li>
                <li data-fragment-index="6" class="fragment">Built-in reports aggregation function</li>
                <li data-fragment-index="7" class="fragment">Extend Allure Report with custom information and plugins</li>
            </ul>
        </section>
        <section data-transition="slide-in fade-out"
                 data-background-image="img/allure_sample_test.png">
        </section>
        <section data-transition="slide-in fade-out"
                 data-background-image="img/allure_suite_of_suites.png">
        </section>
    </section>
    <section class="stack">
        <section data-transition="slide-in fade-out">
            <h2>Jenkins</h2>
            <ul style="text-align: left;">
                <li class="fragment" data-fragment-index="1">Jobs pipeline</li>
                <li class="fragment" data-fragment-index="2">Deploy via ADS</li>
                <li class="fragment" data-fragment-index="3">Trigger by commit</li>
            </ul>

        </section>

        <section data-transition="slide-in fade-out">
            <h2>Jenkins Pipeline</h2>
            <img class="croissant" data-fragment-index="1" data-src="img/jenkins-pipeline.png">
        </section>

        <!--<section data-transition="slide-in fade-out">-->
            <!--<h2>Pipeline Flow</h2>-->
            <!--<img data-fragment-index="1" data-src="img/realworld-pipeline-flow.png">-->
        <!--</section>-->

        <section data-transition="slide-in fade-out">
            <h2>Pipeline As Code</h2>
            <p>Loading pipeline scripts using the checkout scm step leverages the idea of "pipeline as code," and lets you maintain pipelines using version control and your favorite Groovy editors.</p>
        </section>

        <section data-transition="slide-in fade-out">
            <h2>Example</h2>
            <pre>
Jenkinsfile<code>node {
    checkout scm
    stage('build') {
    }

    stage('tests') {
        parallel(
            'unit tests': {},
            'integration tests': {}
        )
    }

    stage('deploy') {
        input 'Really?'
    }
}
</code></pre>
        </section>

        <section data-transition="slide-in fade-out">
            <h2>Deploy via ADS</h2>
            <p style="text-align: left;">
                1. Python script
            <pre>
http://mercurial.nordigy.ru/platform/tools<code>
deploy.py --env MY-ENV
--components ark:feature_branch mds:latest
-v true
</code></pre>
            </p>
            <p style="text-align: left;">
                2.
                <a href="http://ams02-i01-jen02:8080/view/Platform/view/_Common/job/Platform-Deploy-Via-ADS/">Jenkins Job</a>
            </p>
        </section>
    </section>

    <section class="stack">
        <section data-transition="slide-in fade-out">
            <h2>Performance testing</h2>
        </section>

        <section data-background-image="img/gatling-logo.png" data-background-size="250px" data-background-position="70% 45%">
            <h2>Gatling</h2>
            <div style="text-align: left;">
                <ul>
                    <li class="fragment" data-fragment-index="1">High performance</li>
                    <li class="fragment" data-fragment-index="2">Developer-friendly DSL</li>
                    <li class="fragment" data-fragment-index="3">Easy integrate with AGS</li>
                    <li class="fragment" data-fragment-index="4">Ready-to-present HTML reports</li>
                    <li class="fragment" data-fragment-index="5">Real-time reporting with Grafana and InfluxDB (and Docker)</li>
                </ul>
                <hr>
                <p style="text-align: center;">"Arm yourself for performance"</p>
            </div>
        </section>

        <section data-transition="slide-in fade-out">
            <h2>Gatling Simulation</h2>
            <pre><code>class MySimulation extends Simulation {
val conf = http.baseUrl("http://localhost")

val scn = scenario("Gatling")
  .exec(http("index").get("/"))
  .feed(AccountFeeder())
  .during(10 minutes) {
    exec(
      http("json").get("/json")
        .check(jsonPath("$.id")
        .saveAs("id"))
    )
  }
setUp(scn.inject(atOnceUsers(1)))
  .protocols(conf)
}</code></pre>
        </section>

        <section>
            <h2>Integrate with AGS</h2>
            <pre><code>object AccountFeeder {
val accountService: AccountService = new AccountService()

def apply(): RecordSeqFeederBuilder[String] = {
return accountService.getAccounts(50).circular
}
}</code></pre>
        </section>

        <section data-transition="slide-in fade-out">
            <h3>Gatling Report Summary</h3>
            <img class="croissant" data-fragment-index="1" data-src="/img/gatling-global-charts.png">
        </section>
        <section data-transition="slide-in fade-out">
            <h3>Gatling Report Summary</h3>
            <img class="croissant" data-fragment-index="1" data-src="/img/gatling-global-table.png">
        </section>
        <section data-transition="slide-in fade-out">
            <h3>Requests Summary</h3>
            <img class="croissant" data-fragment-index="1" data-src="/img/gatling-requests-per-second.png">
        </section>
        <section data-transition="slide-in fade-out">
            <h3>Responses Summary</h3>
            <img class="croissant" data-fragment-index="1" data-src="/img/gatling-responses-per-second.png">
        </section>
        <section data-transition="slide-in fade-out">
            <h2>Real-time Reporting</h2>
            <p style="text-align: left;">1. Run Grafana and InfluxDB</p>
            <pre><code>docker run -d -p 8083:8083 -p 8086:8086 -p 2015:2015 \
--name influxdb \
-e GRAPHITE_DB="gatling" -e GRAPHITE_BINDING=':2015' \
-e ADMIN_USER="root" -e INFLUXDB_INIT_PWD="root" \
tutum/influxdb:latest

docker run -d -p 3000:3000 \
--link influxdb:influxdb \
--name grafana \
grafana/grafana
</code></pre>
        </section>
        <section data-transition="slide-in fade-out">
            <h2>Real-time Reporting</h2>
            <p style="text-align: left;">2. Configure Gatling (e.g. with Maven)</p>
    <pre><code><plugin>
    <groupId>io.gatling</groupId>
    <artifactId>gatling-maven-plugin</artifactId>
    <executions>
        <execution>
            <phase>test</phase>
            <goals>
                <goal>execute</goal>
            </goals>
            <configuration>
                <configFolder>src/test/resources/conf</configFolder>
                <simulationsFolder>src/test/scala</simulationsFolder>
            </configuration>
        </execution>
    </executions>
</plugin>
</code></pre>
        </section>
        <section data-transition="slide-in fade-out">
            <h2>Real-time Reporting</h2>
            <p style="text-align: left;">3. Configure connection to InfluxDB (gatling.conf)</p>
            <pre><code>graphite {
  host = "$INFLUXDB_HOST"
  port = 2015
  protocol = "tcp"
  rootPathPrefix = "gatling"
}
</code></pre>
        </section>
        <section data-transition="slide-in fade-out">
            <h2>Real-time Reporting</h2>
            <p style="text-align: left;">4. Run tests and monitor results</p>
            <pre><code>mvn test -Dgatling.simulationClass=TestMdsClusterAvailability
</code></pre>
        </section>
        <section data-transition="slide-in fade-out">
            <h3>MDS Availability Test</h3>
            <img class="croissant" data-fragment-index="1" data-src="img/grafana.png">
        </section>

    </section>
    <section data-transition="slide-in fade-out">
        <h2>Spasibo</h2>
    </section>
    <!--<section class="stack">
        <section data-transition="slide-in fade-out">
            <h2>High Availability Testing</h2>
            <p style="text-transform: uppercase" class="fragment" data-fragment-index="1">If you don't have high availability</p>
            <p style="text-transform: uppercase" class="fragment" data-fragment-index="2">you're gonna have a bad time</p>
            <img src="img/ha.png" class="fragment" style="border: none; box-shadow: none;" data-fragment-index="2">
        </section>
        <section data-transition="slide-in fade-out">
            <h2>High Availability Testing</h2>
            <h4>Recipe Like Grandma Used to Make</h4>
            <ul style="text-align: left; list-style-type:none">
                <li class="fragment" data-fragment-index="1">L - Load with Gatling</li>
                <li class="fragment" data-fragment-index="2">O - Orchestrate with Ansible</li>
                <li class="fragment" data-fragment-index="3">M - Monitor with Zabbix/Marathon</li>
            </ul>
        </section>
        <section data-transition="slide-in fade-out">
            <h2>Ansible</h2>
            <p style="font-size: smaller">is a fictional machine capable of instantaneous or superluminal communication</p>
            <ul style="text-align: left;">
                <li class="fragment" data-fragment-index="1">Manage your inventory in simple text files</li>
                <li class="fragment" data-fragment-index="2">Playbooks: a simple + powerful automation language</li>
                <li class="fragment" data-fragment-index="3">Parallel task execution</li>
            </ul>
            <img src="img/ansible.png" data-fragment-index="4" class="fragment croissant">
        </section>
        <section data-transition="slide-in fade-out">
            <h2>Ansible Pros & Cons</h2>
            <ul style="text-align: left; list-style-type: none;">
                <li class="fragment" data-fragment-index="1">(+) Easy to start to use, good for small environments;</li>
                <li class="fragment" data-fragment-index="2">(-) Requires a solid SSH connection, need to be reconfigured after full deployments;</li>
                <li class="fragment" data-fragment-index="3">(-) Doesn't fail fast... it bombs, because of bare minimum of syntax checks;</li>
                <li class="fragment" data-fragment-index="4">(-) Large playbooks are hard to be maintained.</li>
            </ul>
        </section>
        <section data-transition="slide-in fade-out">
            <h2>Ansible</h2>
            <h4>Inventory</h4>
            <pre><code>[pladis-pas]
pla01-t04-pas[01:03]

[pladis-mds]
pla01-t04-mds[01:02]

marathon ansible_host=10.62.3.250

[pladis-pwr]
pla01-t04-pwr01
</code></pre>
        </section>
        <section data-transition="slide-in fade-out">
            <h2>Ansible</h2>
            <h4>Playbook to manage ARK in Marathon</h4>
            <pre><code data-trim data-noescape>- hosts: localhost
tasks:
- name: make request to marathon api
  tags:
    - get_ark_status
  uri:
    url: http://{{ hostvars['marathon']['ansible_host']  }}:8080/v2/apps?id=pla01-t04-ark
    method: GET
    user: marathon
    password: marathon
    force_basic_auth: yes
  register: restdata
- debug: msg="{{ restdata.json.apps[0].id }}:{{ restdata.json.apps[0].tasksRunning }}:{{ restdata.json.apps[0].tasksHealthy }}:{{restdata.json.apps[0].tasksUnhealthy}} {{ restdata.json.apps[1].id }}:{{ restdata.json.apps[1].tasksRunning }}:{{ restdata.json.apps[1].tasksHealthy }}:{{restdata.json.apps[1].tasksUnhealthy}}"
  tags:
    - get_ark_status
- debug: msg="No errors for ark01 and ark02"
  tags:
    - get_ark_status
  when: restdata.json.apps[0].tasksUnhealthy==0 and restdata.json.apps[1].tasksUnhealthy==0
</code></pre>
        </section>
        <section data-transition="slide-in fade-out">
            <h2>Ansible</h2>
            <h4>Playbook to manage ARK in Marathon</h4>
            <pre><code data-trim data-noescape>    - name: ARK kill ark01
  tags:
    - kill_ark01
  uri:
    url: http://{{ hostvars['marathon']['ansible_host']  }}:8080/v2/apps/pla01-t04-ark01/tasks?scale=true
    method: DELETE
    user: marathon
    password: marathon
    force_basic_auth: yes
  register: ark01_restdata
- debug: msg="{{ ark01_restdata.msg }}"
  tags:
    - kill_ark01
</code></pre>
        </section>
        <section data-transition="slide-in fade-out">
            <h2>Ansible</h2>
            <h4>Execute tasks</h4>
            <pre><code data-trim data-noescape># ansible pladis-pas -m shell -a "service pas status"
pla01-t04-pas02 | SUCCESS | rc=0 >>
pas (pid 8322) is running...

pla01-t04-pas03 | SUCCESS | rc=0 >>
pas (pid 9299) is running...

pla01-t04-pas01 | SUCCESS | rc=0 >>
pas (pid 23079) is running...

</code></pre>
        </section>
        <section data-transition="slide-in fade-out">
            <h2>Ansible</h2>
            <h4>Execute tasks</h4>
            <pre><code data-trim data-noescape># ansible-playbook marathon.yaml -t get_ark_status

PLAY [localhost] ***************************************************************

TASK [setup] *******************************************************************
ok: [localhost]

TASK [make request to marathon api] ********************************************
ok: [localhost]

TASK [debug] *******************************************************************
ok: [localhost] => {
"msg": "/pla01-t04-ark01:3:3:0 /pla01-t04-ark02:3:3:0"
}

TASK [debug] *******************************************************************
ok: [localhost] => {
"msg": "No errors for ark01 and ark02"
}
</code></pre>
        </section>
    </section>-->


</div>
