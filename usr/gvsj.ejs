<div class="slides">
    <section class="stack">
        <section  class="croissant"
                  data-transition="slide-in fade-out"
                  data-background-image="img/ball.gif"
                  data-background-size="53%"
                  data-transition="slide-in fade-out"></section>
    </section>

    <!-- Cover page -->
    <section class="stack">
        <section>
            <h1>Something New</h1>
            <h3 class="fragment" >for your testing</h3>
        </section>

        <section>
            <h2>C# vs JMeter vs Gatling</h2>
        </section>

    </section>

    <section class="stack">
        <section data-transition="slide-in fade-out">
            <h2>Request Declaration</h2>
        </section>

        <section data-transition="slide-in fade-out">
            <pre style="width: 120%; margin-left: -10%;">C# Request Declaration<code data-trim data-noescape class="csharp">
[TestMethod]
[TestCategory("v1.0/account/~/extension/~; GET; GetExtensionInfo; Default")]
public void ExtensionInfoFlow_GetExtension()
{
    SendRequestAndCheck(GetAuthInfo());
}
            </code></pre>
        </section>

        <section data-transition="slide-in fade-out">
            <pre style="width: 130%; margin-left: -15%;">JMeter Request Declaration<code data-trim data-noescape class="java" style="font-size: 18px">
@Test
public void getExtensionInfo() {
Optional&lt;TestContext&gt; testContext = getContext().getContextStorage().get();
    testContext.ifPresent( context -> {
        ExtensionInfoService extensionInfoService = getContext().getExtensionInfoService();
        String authHeader = AuthorizationHeader.bearer(context.getToken().getAccessToken());
        extensionInfoService.extensionInfo(authHeader);
    });
}

public interface ExtensionInfoService {
    @Headers({"Content-Type: application/json", "RcAccountLocation: pas-load-test", "Authorization: {authorizationHeader}"})
    @RequestLine("GET /restapi/v1.0/account/~/extension/~")
    ExtensionInfoResource extensionInfo(@Param(value = "authorizationHeader") String authorizationHeader);
}

            </code></pre>
        </section>

        <section data-transition="slide-in fade-out">
            <pre>Gatling Request Declaration<code data-trim data-noescape class="scala">
http("Get extension info")
    .get("/restapi/v1.0/account/~/extension/~")
    .header("Authorization", "Bearer ${access_token}")
    .check(status.is(200))
            </code></pre>
        </section>

    </section>

    <section class="stack">
        <section data-transition="slide-in fade-out">
            <h2>Scenario Declaration</h2>
        </section>

        <section data-transition="slide-in fade-out">
            <pre>C# Scenario Declaration <strong>(GUI + Autogenerated XML)</strong><code data-trim data-noescape class="xml">
&lt;LoadTest Name="RestAPI_Stress"&gt;
  &lt;Scenarios&gt;
    &lt;Scenario Name="Scenario1"&gt;
      &lt;TestMix&gt;
        &lt;TestProfile Name="ExtensionInfoFlow_GetExtension"
      &lt;/TestMix&gt;
    &lt;/Scenario&gt;
  &lt;/Scenarios&gt;
&lt;/LoadTest&gt;
            </code></pre>
        </section>

        <section data-transition="slide-in fade-out">
            <pre style="width: 130%; margin-left: -15%; max-height: 800px">JMeter Scenario Declaration <strong>(GUI + Autogenerated XML)</strong><code data-trim data-noescape class="xml" style="font-size: 14px; line-height: 150%; max-height: 800px">
&lt;ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Extension Info" enabled="true"&gt;
    &lt;intProp name="ThroughputController.style"&gt;1&lt;/intProp&gt;
    &lt;boolProp name="ThroughputController.perThread"&gt;true&lt;/boolProp&gt;
    &lt;intProp name="ThroughputController.maxThroughput"&gt;1&lt;/intProp&gt;
    &lt;FloatProperty&gt;
        &lt;name&gt;ThroughputController.percentThroughput&lt;/name&gt;
        &lt;value&gt;100.0&lt;/value&gt;
        &lt;savedValue&gt;0.0&lt;/savedValue&gt;
    &lt;/FloatProperty&gt;
&lt;/ThroughputController&gt;
&lt;hashTree&gt;
    &lt;JUnitSampler guiclass="JUnitTestSamplerGui" testclass="JUnitSampler" testname="Extension Info" enabled="true"&gt;
        &lt;stringProp name="junitSampler.classname"&gt;com.ringcentral.platform.pas.ExtensionInfoTest&lt;/stringProp&gt;
        &lt;stringProp name="junitsampler.constructorstring"&gt;&lt;/stringProp&gt;
        &lt;stringProp name="junitsampler.method"&gt;getExtensionInfo&lt;/stringProp&gt;
        &lt;stringProp name="junitsampler.pkg.filter"&gt;&lt;/stringProp&gt;
        &lt;stringProp name="junitsampler.success"&gt;Test successful&lt;/stringProp&gt;
        &lt;stringProp name="junitsampler.success.code"&gt;1000&lt;/stringProp&gt;
        &lt;stringProp name="junitsampler.failure"&gt;Test failed&lt;/stringProp&gt;
        &lt;stringProp name="junitsampler.failure.code"&gt;0001&lt;/stringProp&gt;
        &lt;stringProp name="junitsampler.error"&gt;An unexpected error occured&lt;/stringProp&gt;
        &lt;stringProp name="junitsampler.error.code"&gt;9999&lt;/stringProp&gt;
        &lt;stringProp name="junitsampler.exec.setup"&gt;true&lt;/stringProp&gt;
        &lt;stringProp name="junitsampler.append.error"&gt;false&lt;/stringProp&gt;
        &lt;stringProp name="junitsampler.append.exception"&gt;false&lt;/stringProp&gt;
        &lt;boolProp name="junitsampler.junit4"&gt;true&lt;/boolProp&gt;
    &lt;/JUnitSampler&gt;
    &lt;hashTree/&gt;
&lt;/hashTree&gt;
            </code></pre>
        </section>

        <section data-transition="slide-in fade-out">
            <pre>Gatling Scenario Declaration<code data-trim data-noescape class="scala">
scenario("Get extension info")
    .feed(userFeeder)
    .feed(ApplicationSoftPhoneFeeder().circular)
    .exec(getTokenByPasswordRequest)
    .exec(extensionInfoRequest)
            </code></pre>
        </section>

    </section>

    <section class="stack">
        <section data-transition="slide-in fade-out">
            <h2>Load Profile</h2>
        </section>

        <section data-transition="slide-in fade-out">
            <pre style="width: 130%; margin-left: -15%">C# Load Profile <strong>(GUI + Autogenerated XML)</strong><code data-trim data-noescape class="xml"  style="font-size: 17px">
&lt;LoadTest Name="RestAPI_Stress"&gt;
    &lt;Scenarios&gt;
        &lt;Scenario Name="Scenario1"&gt;
            &lt;ThinkProfile Value="0.2" Pattern="NormalDistribution" /&gt;
            &lt;LoadProfile Pattern="Step" InitialUsers="10" MaxUsers="3300" StepUsers="50" StepDuration="12" StepRampTime="0" /&gt;
        &lt;/Scenario&gt;
    &lt;/Scenarios&gt;
&lt;/LoadTest&gt;
            </code></pre>
        </section>

        <section data-transition="slide-in fade-out">
            <pre style="width: 120%; margin-left: -10%; max-height: 800px">JMeter Load Profile <strong>(GUI + Autogenerated XML)</strong><code data-trim data-noescape class="xml" style="font-size: 16px; max-height: 800px">
&lt;ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true"&gt;
    &lt;stringProp name="ThreadGroup.on_sample_error"&gt;continue&lt;/stringProp&gt;
    &lt;elementProp name="ThreadGroup.main_controller"
                    elementType="LoopController"
                    guiclass="LoopControlPanel"
                    testclass="LoopController"
                    testname="Loop Controller"
                    enabled="true"&gt;
        &lt;boolProp name="LoopController.continue_forever"&gt;false&lt;/boolProp&gt;
        &lt;intProp name="LoopController.loops"&gt;-1&lt;/intProp&gt;
    &lt;/elementProp&gt;
    &lt;stringProp name="ThreadGroup.num_threads"&gt;2&lt;/stringProp&gt;
    &lt;stringProp name="ThreadGroup.ramp_time"&gt;1&lt;/stringProp&gt;
    &lt;longProp name="ThreadGroup.start_time"&gt;1470926327000&lt;/longProp&gt;
    &lt;longProp name="ThreadGroup.end_time"&gt;1470926327000&lt;/longProp&gt;
    &lt;boolProp name="ThreadGroup.scheduler"&gt;false&lt;/boolProp&gt;
    &lt;stringProp name="ThreadGroup.duration"&gt;86760&lt;/stringProp&gt;
    &lt;stringProp name="ThreadGroup.delay"&gt;&lt;/stringProp&gt;
&lt;/ThreadGroup&gt;
            </code></pre>
        </section>

        <section data-transition="slide-in fade-out">
            <pre style="width: 112%; margin-left: -6%; max-height: 800px">Gatling Load Profile<code data-trim data-noescape class="scala" style="font-size: 16px; max-height: 800px">
class Top20Simulation extends Simulation {
    val conf = ConfigFactory.load()
    val httpProtocol = http
        .baseURL(conf.getString("platform.host"))

    val getExtensionInfoScenario =
                    ExtensionFlow.getExtensionInfoScenario(accountFeeder)

    setUp(
      getExtensionInfoScenario.inject(
        nothingFor(4 seconds), // 1
        atOnceUsers(10), // 2
        rampUsers(10) over(5 seconds), // 3
        constantUsersPerSec(20) during(15 seconds), // 4
        constantUsersPerSec(20) during(15 seconds) randomized, // 5
        rampUsersPerSec(10) to(20) during(10 minutes), // 6
        rampUsersPerSec(10) to(20) during(10 minutes) randomized, // 7
        splitUsers(1000) into(rampUsers(10) over(10 seconds)) separatedBy(10 seconds), // 8
        splitUsers(1000) into(rampUsers(10) over(10 seconds)) separatedBy(atOnceUsers(30)), // 9
        heavisideUsers(1000) over(20 seconds) // 10
        ).protocols(httpProtocol)
      )
    )
}
            </code></pre>
        </section>

    </section>

    <section class="stack">
        <section data-transition="slide-in fade-out">
            <h2>JMeter</h2>
        </section>

        <section data-background="img/jmeter_gui.png"
                 data-background-size="90%"
                 data-transition="slide-in fade-out">
        </section>

        <section data-transition="slide-in fade-out">
            <h2>Issues</h2>
            <ul>
                <li>To run test method the jar file have to be added to classpath before start</li>
                <li>Validates test methods success or failure <em>not</em> request and responses</li>
                <li>Request Declaration + Load Profile provides xml file with ~6000 lines (e.g. Glip tests)</li>
            </ul>
        </section>

    </section>
</div>
